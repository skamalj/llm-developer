### Task: Implement `BaseStore` for Cosmos DB

**Objective**: Implement the `BaseStore` class for Cosmos DB using the Azure Cosmos DB Python SDK and call the derived calss CosmosDBStore

**Specifications**:  
- Use the following interfaces from the `langgraph` package:  
  ```python
  from langgraph.store.base import BaseStore, Item, PutOp, Result, SearchItem, NamespacePath, Literal, Op, SearchOp

### Instructions below til <EOF> are for developer only. Tester should skip this section
  - Create directory structure appropriate for PyPi package. package name will be 'langgraph_store_cosmosdb'. Use pyproject.toml only for package specification not setup.py
  - Name the derived class `CosmosDBStore`
  - Implement all methods of BaseStore, which are described below
  - Use Cosmos DB features such as containers, partition keys, and queries to map these methods effectively.
  - Namespace is passed as a tuple of values ('a', 'b', 'c'), you must convert it to suitable string while saving and back to tuple while reading and returning as Item.
  - created_at must be set only during creation and must not change for updates. This is important when implementing 'put' method which is used for both create and update
  - updated_at must be updated every item update. It will be same as created_at during creation.
  - implement methods in this order put, aput, delete, adelete, get, aget and then rest in any order.
  - Read cosmosdb credentials from environment - COSMOSDB_KEY and COSMOSDB_ENDPOINT
  - Enable creation of cosmosdb database and container if it does not exists.
  - For search and list methods only suopport prefix search.
  - Create this as PyPi package 'langgraph_store_cosmosdb' using pyproject.toml
<EOF>

### BaseStore Methods

1. **`batch(ops: Iterable[Op]) -> list[Result]`**  
   Executes multiple operations synchronously in a single batch.  
   - **Parameters**:
     - `ops`: An iterable of `Op` objects specifying the operations to perform.
   - **Returns**: A list of `Result` objects representing the outcome of each operation.

2. **`get(namespace: tuple[str, ...], key: str) -> Optional[Item]`**  
   Retrieves a single item synchronously from the store.  
   - **Parameters**:
     - `namespace`: A tuple representing the hierarchical path to the item's location.
     - `key`: The unique identifier of the item within the namespace.
   - **Returns**: An `Item` object if the key exists, otherwise `None`.

3. **`search(namespace_prefix: tuple[str, ...], query: Optional[str] = None, filter: Optional[dict[str, Any]] = None, limit: int = 10, offset: int = 0) -> list[SearchItem]`**  
   Performs a synchronous search within a namespace prefix.  
   - **Parameters**:
     - `namespace_prefix`: The namespace prefix to search within.
     - `query`: An optional query string to filter results.
     - `filter`: An optional dictionary of filters to apply.
     - `limit`: Maximum number of items to return (default: 10).
     - `offset`: Number of items to skip (default: 0).
   - **Returns**: A list of `SearchItem` objects matching the search criteria.

4. **`put(namespace: tuple[str, ...], key: str, value: dict[str, Any], index: Optional[Union[bool, list[str]]] = None)`**  
   Stores or updates an item synchronously in the store.  
   - **Parameters**:
     - `namespace`: The hierarchical path to the item's location.
     - `key`: The unique identifier of the item.
     - `value`: A dictionary representing the item's content.
     - `index`: Optional indexing settings (boolean or a list of indexed fields).
   - **Returns**: None

5. **`delete(namespace: tuple[str, ...], key: str)`**  
   Deletes an item synchronously from the store.  
   - **Parameters**:
     - `namespace`: The hierarchical path to the item's location.
     - `key`: The unique identifier of the item to delete.
   - **Returns**: None.

6. **`list_namespaces(*, prefix: Optional[NamespacePath] = None, suffix: Optional[NamespacePath] = None, max_depth: Optional[int] = None, limit: int = 100, offset: int = 0) -> list[tuple[str, ...]]`**  
    Lists namespaces synchronously based on specified match conditions.  
    - **Parameters**:
      - `prefix`: Prefix search for namespaces.
      - `suffix`: Suffix search for namespaces.
      - `max_depth`: Optional maximum depth to traverse.
      - `limit`: Maximum number of results to return (default: 10).
      - `offset`: Number of results to skip (default: 0).
    - **Returns**: A list of `NamespacePath` objects

---

### Item Class

1. **Description**: Represents an individual item stored in the key-value store.  
   - **Attributes**:
     - `namespace` (tuple[str, ...]): The hierarchical path to the item's location.
     - `key` (str): The unique identifier for the item.
     - `value` (dict[str, Any]): The data stored in the item.
     - `created_at` (datetime): The timestamp when the item was created.
     - `updated_at` (datetime): The timestamp when the item was last updated.
